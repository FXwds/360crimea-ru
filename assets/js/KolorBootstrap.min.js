var krpano = null;var debug = false;var krpanoLoaded = false;var pluginLoaded = new ktools.Map();var isTourStarted = false;var kolorFullscreen = null;var kolorBrowserDetect = null;var kolorStartIndex = 4000;var crossPanoUrl = '';var tourLanguage;if ( debug ) {if ( typeof(console) == 'undefined' ) {console = {log : function (text) {} };}}jQuery(document).ready(function() {kolorBrowserDetect = new ktools.BrowserDetect();kolorBrowserDetect.init();kolorFullscreen = new ktools.Fullscreen(document.getElementById("tourDIV"));kolorFullscreen.supportsFullscreen();kolorFullscreen.setExternal({'enter': krPanoFullscreenEnter,'exit': krPanoFullscreenExit,'change': krpanoFullscreenChange,'resize': krPanoFullscreenResize});});function krPanoFullscreenEnter() {var ki = getKrPanoInstance();if(ki !== null){getKrPanoInstance().call("enterFullScreenFallback");}}function krPanoFullscreenExit() {var ki = getKrPanoInstance();if(ki !== null){ki.call("exitFullScreenFallback");}}function krpanoFullscreenChange(state) {var ki = getKrPanoInstance();if(ki !== null){if(state){getKrPanoInstance().call("enterFullScreenChangeEvent");}else{getKrPanoInstance().call("exitFullScreenChangeEvent");}}}function krPanoFullscreenResize() {var ki = getKrPanoInstance();if(ki !== null){getKrPanoInstance().call("resizeFullScreenEvent");}}function setFullscreen(value) {var state;if(typeof value == "string")state = (value.toLowerCase() == "true");elsestate = Boolean(value);if (kolorFullscreen) {if(state){kolorFullscreen.request();}else{kolorFullscreen.exit();}}}function getKrPanoInstance() {if ( krpano == null ) {krpano = document.getElementById('krpanoSWFObject');}return krpano;}function invokeKrFunction(fnName) {var args = [].slice.call(arguments, 1);var callString = fnName+'(';for(var i=0, ii=args.length; i<ii; i++){callString += args[i];if(i != ii-1) { callString += ', '; }}callString += ');';if(getKrPanoInstance() !== null){getKrPanoInstance().call(callString);}}function getKrValue(identifier, type) {if ( typeof identifier == "undefined" ){return identifier;}if(getKrPanoInstance() !== null){if(getKrPanoInstance().get(identifier) == null) {return null;}switch ( type ) {case "int":return parseInt(getKrPanoInstance().get(identifier));case "float":return parseFloat(getKrPanoInstance().get(identifier));case "string":return String(getKrPanoInstance().get(identifier));case "bool":return Boolean(getKrPanoInstance().get(identifier) === 'true' || parseInt(getKrPanoInstance().get(identifier)) === 1 || getKrPanoInstance().get(identifier) === 'yes' || getKrPanoInstance().get(identifier) === 'on');default:return getKrPanoInstance().get(identifier);}}else{return null;}}function invokePluginFunction(pluginName, functionName) {if ( debug ) {console.log("invokePluginFunction("+pluginName+", "+functionName+")");}var plugin = ktools.KolorPluginList.getInstance().getPlugin(pluginName);if (plugin == null) {if ( debug ) { console.log("invokePluginFunction: plugin instance doesn't exist"); }if(pluginLoaded && pluginLoaded.item(pluginName)){pluginLoaded.update(pluginName, arguments);}else{pluginLoaded.add(pluginName, arguments);}return false;}var engine = plugin.getRegistered();if (engine == null) {if ( debug ) { console.log("invokePluginFunction: plugin isn't registered"); }if(pluginLoaded && pluginLoaded.item(pluginName)){pluginLoaded.update(pluginName, arguments);}else{pluginLoaded.add(pluginName, arguments);}return false;}var restArgs = [].slice.call(arguments, 2);return engine[functionName](restArgs);}function eventKrpanoLoaded (isWebVr) {if ( debug ) {console.log('krpano is loaded');}if (krpanoLoaded) { return false; }tourLanguage = getKrValue("tour_language","string")if(typeof tourLanguage == "undefined"){tourLanguage = 'en';}ktools.I18N.getInstance().initLanguage(tourLanguage, crossPanoUrl+'indexdata/index_messages_','.xml');krpanoLoaded = true;if(isWebVr){addKolorAnalytics('analytics');}else{addKolorArea('description');addKolorAnalytics('analytics');addKolorBox('socialShare');}}function eventUnloadPlugins () {resetValuesForPlugins();deleteKolorBox('socialShare');deleteKolorAnalytics('analytics');deleteKolorArea('description');}function resetValuesForPlugins () {krpano = null;krpanoLoaded = false;isTourStarted = false;pluginLoaded = new ktools.Map();kolorStartIndex = 4000;}function eventTourStarted () {if ( debug ) {console.log('tour is started');}isTourStarted = true;}function eventTourChangeLanguage (pLang) {if ( debug ) {console.log('change tour language : '+pLang);}ktools.I18N.getInstance().initLanguage(pLang, crossPanoUrl+'indexdata/index_messages_','.xml');}function addKolorBox(pPlugID){if(typeof ktools.KolorPluginList.getInstance().getPlugin(pPlugID) == "undefined"){var kolorBoxCSS = new ktools.CssStyle("KolorBoxCSS", "https://russia-360.info/assets/graphics/KolorBox/kolorBox.css");var kolorBoxJS = new ktools.Script("KolorBoxJS", "https://russia-360.info/assets/graphics/KolorBox/KolorBox.min.js", [], true);var kolorBoxPlugin = new ktools.KolorPlugin(pPlugID);kolorBoxPlugin.addScript(kolorBoxJS);kolorBoxPlugin.addCss(kolorBoxCSS);ktools.KolorPluginList.getInstance().addPlugin(kolorBoxPlugin.getPluginName(), kolorBoxPlugin, true);showKolorBox(pPlugID, 0, true);}}function showKolorBox(pPlugID, pIndex, pInitOnly){if(debug) { console.log("showKolorBox " + pPlugID); }if(!ktools.KolorPluginList.getInstance().getPlugin(pPlugID).isInitialized() || typeof KolorBox === "undefined"){err = "KolorBox JS or XML is not loaded !";if(debug){ console.log(err); }setTimeout(function() { showKolorBox(pPlugID, pIndex, pInitOnly); }, 100);return;}if(ktools.KolorPluginList.getInstance().getPlugin(pPlugID).getRegistered() === null){ktools.KolorPluginList.getInstance().getPlugin(pPlugID).register(new KolorBox(pPlugID, "panoDIV"));}var kolorBox = ktools.KolorPluginList.getInstance().getPlugin(pPlugID).getRegistered();if(!kolorBox.isReady()){var kolorBoxOptions = [];var optionName = '';var optionValue = '';var optionLength = parseInt(getKrPanoInstance().get("ptplugin["+pPlugID+"].settings[0].option.count"));for(var j = 0; j < optionLength; j++){optionName = getKrValue("ptplugin["+pPlugID+"].settings[0].option["+j+"].name","string");if (optionName == 'zorder') {optionValue = kolorStartIndex + getKrValue("ptplugin["+pPlugID+"].settings[0].option["+j+"].value", getKrValue("ptplugin["+pPlugID+"].settings[0].option["+j+"].type", "string"));} else {optionValue = getKrValue("ptplugin["+pPlugID+"].settings[0].option["+j+"].value", getKrValue("ptplugin["+pPlugID+"].settings[0].option["+j+"].type", "string"));}kolorBoxOptions[optionName] = optionValue;}kolorBoxOptions['device'] = getKrValue('vrtourdevice','string');kolorBox.setKolorBoxOptions(kolorBoxOptions);if(kolorBoxOptions['starts_opened']) {pInitOnly = false;}var kbItem = null;var itemLength = parseInt(getKrPanoInstance().get("ptplugin["+pPlugID+"].internaldata[0].item.count"));for(var k = 0; k < itemLength; k++){kbItem = new KolorBoxObject();kbItem.setName(getKrValue("ptplugin["+pPlugID+"].internaldata[0].item["+k+"].name","string"));kbItem.setTitle(getKrValue("ptplugin["+pPlugID+"].internaldata[0].item["+k+"].title","string"));kbItem.setCaption(getKrValue("ptplugin["+pPlugID+"].internaldata[0].item["+k+"].caption","string"));kbItem.setValue(getKrValue("ptplugin["+pPlugID+"].internaldata[0].item["+k+"].value","string"));if(kbItem.getValue() === "externalData")kbItem.setData(getKrValue('data['+getKrValue("ptplugin["+pPlugID+"].internaldata[0].item["+k+"].dataName","string")+'].content', 'string'));kolorBox.addKolorBoxItem(kbItem);kbItem.init();}kolorBox.setReady(true);invokeKrFunction("kolorBoxJsReady_"+pPlugID);}if(typeof pPlugID !== "undefined" && (typeof pInitOnly === "undefined" || pInitOnly === false)){if(typeof pIndex === "undefined") { pIndex = 0; }kolorBox.openKolorBox(pIndex);}if(pluginLoaded && pluginLoaded.item(pPlugID)){invokePluginFunction.apply(null, pluginLoaded.item(pPlugID));pluginLoaded.remove(pPlugID);}}function deleteKolorBox(pPlugID){if(ktools.KolorPluginList.getInstance().getPlugin(pPlugID)){ktools.KolorPluginList.getInstance().removePlugin(pPlugID);}var parent = document.getElementById("panoDIV");var child = document.getElementById(pPlugID);if(parent && child){parent.removeChild(child);}}function addKolorAnalytics(pPlugID){if(typeof ktools.KolorPluginList.getInstance().getPlugin(pPlugID) == "undefined"){var kolorAnalyticsJS = new ktools.Script("KolorAnalyticsJS", "https://russia-360.info/assets/graphics/KolorAnalytics/KolorAnalytics.min.js", [], true);var kolorAnalyticsPlugin = new ktools.KolorPlugin(pPlugID);kolorAnalyticsPlugin.addScript(kolorAnalyticsJS);ktools.KolorPluginList.getInstance().addPlugin(kolorAnalyticsPlugin.getPluginName(), kolorAnalyticsPlugin, true);if(!ktools.KolorPluginList.getInstance().getPlugin(pPlugID).getRegistered() || !ktools.KolorPluginList.getInstance().getPlugin(pPlugID).isInitialized() || typeof KolorAnalytics == "undefined"){createKolorAnalytics(pPlugID);}}}function createKolorAnalytics(pPlugID){if(debug) { console.log("createKolorAnalytics "+pPlugID); }if(!ktools.KolorPluginList.getInstance().getPlugin(pPlugID).isInitialized() || typeof KolorAnalytics == "undefined"){err = "KolorAnalytics JS or XML is not loaded !";if(debug){ console.log(err); }setTimeout(function() { createKolorAnalytics(pPlugID); }, 100);return;}if(ktools.KolorPluginList.getInstance().getPlugin(pPlugID).getRegistered() == null){ktools.KolorPluginList.getInstance().getPlugin(pPlugID).register(new KolorAnalytics(pPlugID, "panoDIV"));}var kolorAnalytics = ktools.KolorPluginList.getInstance().getPlugin(pPlugID).getRegistered();if(!kolorAnalytics.isReady()){var kolorAnalyticsOptions = [];var optionLength = parseInt(getKrPanoInstance().get("ptplugin["+pPlugID+"].settings[0].option.count"));for(var i = 0; i < optionLength; i++){kolorAnalyticsOptions[getKrValue("ptplugin["+pPlugID+"].settings[0].option["+i+"].name","string")] = getKrValue("ptplugin["+pPlugID+"].settings[0].option["+i+"].value", getKrValue("ptplugin["+pPlugID+"].settings[0].option["+i+"].type", "string"));}kolorAnalytics.setKolorAnalyticsOptions(kolorAnalyticsOptions);kolorAnalytics.setReady(true);invokeKrFunction("kolorAnalyticsJsReady_"+pPlugID);kolorAnalytics.generateKolorAnalytics();}}function updateKolorAnalytics(pPlugID,pLang){if(debug) { console.log("updateKolorAnalytics "+pPlugID); }if(ktools.KolorPluginList.getInstance().getPlugin(pPlugID).isInitialized() && typeof KolorAnalytics != "undefined" && ktools.KolorPluginList.getInstance().getPlugin(pPlugID).getRegistered() != null){}}function deleteKolorAnalytics(pPlugID){if(ktools.KolorPluginList.getInstance().getPlugin(pPlugID)){ktools.KolorPluginList.getInstance().removePlugin(pPlugID);}}